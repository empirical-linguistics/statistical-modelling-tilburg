rific,231,762,148
tacular,229,2288,138
tastic,1664,7528,880
geddon,238,1335,122
mageddon,176,2045,79
pocalypse,354,2033,168
flation,53,13,008,19
fluencer,45,373,23
preneur,400,5271,187
razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
problems(d)
d <- read_csv("licious,1060,5716,504
rific,231,762,148
tacular,229,2288,138
tastic,1664,7528,880
geddon,238,1335,122
mageddon,176,2045,79
pocalypse,354,2033,168
flation,53,13008,19
fluencer,45,373,23
preneur,400,5271,187
razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add potential productivity
d$pot_prod <- c(0.0882,0.1942,0.0603,0.1169,0.0914,0.0386,0.0826,0.0015,0.0617,0.0355,0.099)
plot(d$ttr, d$pot_prod)
# add type-token ratio
d$ttr <- d$types/d$tokens
plot(d$ttr, d$pot_prod)
cor(d$ttr, d$pot_prod)
text(log(d$types), d$pot_prod, labels = d$CF)
plot(log(d$types), d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency")
text(log(d$types), d$pot_prod, labels = d$CF)
# read data
d <- read.csv("licious,1060,5716,504
rific,231,762,148
tacular,229,2288,138
tastic,1664,7528,880
geddon,238,1335,122
mageddon,176,2045,79
pocalypse,354,2033,168
flation,53,13008,19
fluencer,45,373,23
preneur,400,5271,187
razzi,66,293,29", col.names = c("CF", "types", "tokens", "hapaxes"))
library(tidyverse)
# read data
d <- read_csv("licious,1060,5716,504
rific,231,762,148
tacular,229,2288,138
tastic,1664,7528,880
geddon,238,1335,122
mageddon,176,2045,79
pocalypse,354,2033,168
flation,53,13008,19
fluencer,45,373,23
preneur,400,5271,187
razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add type-token ratio
d$ttr <- d$types/d$tokens
# add potential productivity
d$pot_prod <- c(0.0882,0.1942,0.0603,0.1169,0.0914,0.0386,0.0826,0.0015,0.0617,0.0355,0.099)
# plot global productivity
# (type frequency log-transformed to make the data less skewed)
plot(log(d$types), d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency")
text(log(d$types), d$pot_prod, labels = d$CF)
library(pdftools)
d <- pdf_text("/Users/stefanhartmann/Documents/Linguistik/Unknown - 2012 - The Oxford Handbook of Language Evolution.pdf")
grep("Kirby", d)
grep("Kirby", d) %>% length
library(tidyverse)
grep("Kirby", d) %>% length
d <- unlist(strsplit(d, " "))
grep("Kirby", d)
grep("Kirby", d) %>% length
library(tidyverse)
# read data
d <- read_csv("-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add type-token ratio
d$ttr <- d$types/d$tokens
# ttr vs. pp
cor.test(d$ttr, d$pot_prod, method = "spearman")
library(tidyverse)
# read data
d <- read_csv("-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add type-token ratio
d$ttr <- d$types/d$tokens
# ttr vs. pp
cor.test(d$ttr, d$pot_prod, method = "spearman")
d$ttr
d$tokens
rm(list=ls())
library(tidyverse)
# read data
d <- read_csv("-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add type-token ratio
d$ttr <- d$types/d$tokens
# add potential productivity
d$pot_prod <- c(0.0882,0.1942,0.0603,0.1169,0.0914,0.0386,0.0826,0.0015,0.0617,0.0355,0.099)
# ttr vs. pp
cor.test(d$ttr, d$pot_prod, method = "spearman")
# plot global productivity
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
# alternative: type frequency log-transformed to make the data less skewed
plot(log(d$types), d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency", xlim=c(3.7, max(log(d$types))))
text(log(d$types), d$pot_prod, labels = d$CF)
library(tidyverse)
# read data
d <- read_csv("-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add type-token ratio
d$ttr <- d$types/d$tokens
# add potential productivity
d$pot_prod <- c(0.0882,0.1942,0.0603,0.1169,0.0914,0.0386,0.0826,0.0015,0.0617,0.0355,0.099)
# ttr vs. pp
cor.test(d$ttr, d$pot_prod, method = "spearman")
# plot global productivity
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
# alternative: type frequency log-transformed to make the data less skewed
plot(log(d$types), d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency", xlim=c(3.7, max(log(d$types))))
text(log(d$types), d$pot_prod, labels = d$CF)
# plot global productivity
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
# alternative: type frequency log-transformed to make the data less skewed
plot(log(d$types), d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency", xlim=c(3.7, max(log(d$types))))
text(log(d$types), d$pot_prod, labels = d$CF)
# plot global productivity
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
png("CFs_global_prod.png", width = 6.5, height = 5, un = "in", res = 300)
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
dev.off()
# plot global productivity
png("CFs_global_prod.png", width = 8, height = 6, un = "in", res = 300)
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
dev.off()
d$hapaxes
log(d$hapaxes)
log(d$hapaxes)/log(d$tokens)
plot(log(d$hapaxes)/log(d$tokens))
text(log(d$hapaxes)/log(d$tokens), labels = d$CF)
plot(log(d$hapaxes)/log(d$tokens), type = "n")
text(log(d$hapaxes)/log(d$tokens), labels = d$CF)
d$logpotprod <- log(d$hapaxes/log(d$tokens))
d$hapaxes/d$tokens
plot(log(d$types), d$logpotprod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency", xlim=c(3.7, max(log(d$types))))
text(log(d$types), d$logpotprod, labels = d$CF)
library(tidyverse)
# read data
d <- read_csv("-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# add type-token ratio
d$ttr <- d$types/d$tokens
d$pot_prod <- d$hapaxes/d$tokens
d$pot_prod
# ttr vs. pp
cor.test(d$ttr, d$pot_prod, method = "spearman")
# plot global productivity
# png("CFs_global_prod.png", width = 8, height = 6, un = "in", res = 300)
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
?read.csv
?csv
# read data
d <- read.csv(text = "-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", col_names = c("CF", "types", "tokens", "hapaxes"))
# read data
d <- read.csv(text = "CF,types,tokens,hapaxes,
-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", header = TRUE)
# read data
d <- read.csv(text = "CF,types,tokens,hapaxes,
-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", header = TRUE)
# add type-token ratio
d$ttr <- d$types/d$tokens
# add potential productivity
d$pot_prod <- d$hapaxes/d$tokens
# ttr vs. pp
cor.test(d$ttr, d$pot_prod, method = "spearman")
# plot global productivity
# png("CFs_global_prod.png", width = 8, height = 6, un = "in", res = 300)
plot(d$types, d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Type frequency", xlim = c(-0.5, max(d$types)))
text(d$types, d$pot_prod, labels = d$CF)
# alternative: type frequency log-transformed to make the data less skewed
plot(log(d$types), d$pot_prod, type = "n", ylab = "Potential productivity",
xlab = "Logarithmized type frequency", xlim=c(3.7, max(log(d$types))))
text(log(d$types), d$pot_prod, labels = d$CF)
View(d)
# read data
d <- read.csv(text = "CF,types,tokens,hapaxes,
-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", header = TRUE)
View(d)
# read data
d <- read.csv(text = "CF,types,tokens,hapaxes
-licious,1060,5716,504
-rific,231,762,148
-tacular,229,2288,138
-tastic,1664,7528,880
-geddon,238,1335,122
-mageddon,176,2045,79
-pocalypse,354,2033,168
-flation,53,13008,19
-fluencer,45,373,23
-preneur,400,5271,187
-razzi,66,293,29", header = TRUE)
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
rm(list=ls())
load("installed_old.rda")
R.version
214/3
2700*20
tichy <- readLines("/Users/stefanhartmann/Downloads/klimawandel site tichyseinblick.de - Google Search.html")
tichy <- unlist(strsplit(tichy, "https://www.tichyseinblick.de"))
tichy
tichy[2]
tichy[3]
tichy[4]
tichy <- readLines("/Users/stefanhartmann/Downloads/klimawandel site tichyseinblick.de - Google Search.html")
tichy <- unlist(strsplit(tichy, "href=\"https://www.tichyseinblick.de/"))
tichy[4]
tichy[5]
library(stringi)
tichy <- readLines("/Users/stefanhartmann/Downloads/klimawandel site tichyseinblick.de - Google Search.html")
74.100*0.65
?stri_extract_all
#tichy <- unlist(strsplit(tichy, "href=\"https://www.tichyseinblick.de/"))
#
tx <- stri_extract_all(str = tichy, regex = "tichyseinblick.de.*?\"")
tx[2]
tx[5]
tx
74100*0.65
1542-372
0.19*170
170-32.3
library(brms)
help('brms')
?brm
prior1 <- prior(normal(0,10), class = b) +
prior(cauchy(0,2), class = sd)
fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),
data = epilepsy, family = poisson(), prior = prior1)
library(rstan)
stancode <- 'data {real y_mean;} parameters {real y;} model {y ~ normal(y_mean,1);}'
mod <- stan_model(model_code = stancode, verbose = TRUE)
R.version
library("rstan") # observe startup messages
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = 'schools.stan', data = schools_dat)
.libPaths()
install.packages(c("StanHeaders","rstan"),type="source")
library(brms)
fit<- brm(
formula=one.pl,
data=stan.dat2,
family=brmsfamily(“bernoulli”, “logit”),
one.pl.prior <-
prior(“normal(0, 3)”, class = “sd”, group = “Justice”) +
one.pl <- bf(y ~ 1 + (1 | Case) + (1 | Justice))
one.pl.prior <-
prior(“normal(0, 3)”, class = “sd”, group = “Justice”) +
?brm
install.packages("rstan")
144495 + (47615.17 / 2)
list(matrix(1,1,1,2), data.frame(a = c(1,1,2), b = c(3,3,2)), c(7,8,9))
1+1
?sqrt
1+1
1+1
x <- 1+1
x
y <- 2+2
x+y
y-x
sqrt(x+y)
z <- x+y
sqrt(z)
# Vectors
c(1,2,3)
# Vectors
my_vector <- c(1,2,3)
my_character_vector <- c("a", "b", "c")
c(1, "two", 3)
my_other_character_vector <- c(1, "two", 3)
# Data frames
data.frame(names = c("Jack", "Jill", "Hensel", "Gretel"),
gingerbread = c(5, 6, 2, 10) )
# Data frames
my_data_frame <- data.frame(names = c("Jack", "Jill", "Hensel", "Gretel"),
gingerbread = c(5, 6, 2, 10) )
my_data_frame
colnames(my_data_frame)
my_data_frame[2,2]
my_data_frame[3,1]
rownames(my_data_frame)
data.frame(A = my_vector, B = my_character_vector)
data.frame(A = my_vector, B = my_character_vector, C = my_other_character_vector)
my_second_data_frame <- data.frame(A = my_vector, B = my_character_vector,
C = my_other_character_vector)
?matrix
# Matrices
as.matrix(c(1,2,3,4,5,6), ncol = 2)
# Matrices
matrix(c(1,2,3,4,5,6), ncol = 2)
# Matrices
matrix(c(1,2,3,4,5,6), ncol = 2)
# Matrices
my_matrix <- matrix(c(1,2,3,4,5,6), ncol = 2)
# Lists
list(my_vector, my_data_frame, my_matrix)
# Lists
my_list <- list(my_vector, my_data_frame, my_matrix)
my_list[[1]]
my_vector
my_vector[2]
my_list[[1]][2]
my_list
my_list[[2]][3,2]
my_second_data_frame <- data.frame(A = my_vector, B = my_character_vector,
C = my_other_character_vector)
# Vectors
my_vector <- c(1,2,3)
my_character_vector <- c("a", "b", "c")
my_other_character_vector <- c(1, "two", 3)
# Data frames
my_data_frame <- data.frame(names = c("Jack", "Jill", "Hensel", "Gretel"),
gingerbread = c(5, 6, 2, 10) )
my_data_frame[2,2]
my_data_frame[3,1]
rownames(my_data_frame)
my_second_data_frame <- data.frame(A = my_vector, B = my_character_vector,
C = my_other_character_vector)
# Matrices
my_matrix <- matrix(c(1,2,3,4,5,6), ncol = 2)
# Lists
my_list <- list(my_vector, my_data_frame, my_matrix)
my_vector[2]
my_list[[2]][3,2]
# Vectors
my_vector <- c(1,2,3)
my_character_vector <- c("a", "b", "c")
my_other_character_vector <- c(1, "two", 3)
# Data frames
my_data_frame <- data.frame(names = c("Jack", "Jill", "Hensel", "Gretel"),
gingerbread = c(5, 6, 2, 10) )
my_data_frame[2,2]
my_data_frame[3,1]
rownames(my_data_frame)
my_second_data_frame <- data.frame(A = my_vector, B = my_character_vector,
C = my_other_character_vector)
# Matrices
my_matrix <- matrix(c(1,2,3,4,5,6), ncol = 2)
# Lists
my_list <- list(my_vector, my_data_frame, my_matrix)
my_vector[2]
my_list[[2]][3,2]
install.packages("tidyverse")
# install.packages("tidyverse")
library(tidyverse)
?separate
library(tspredict)
library(tidyverse)
library(vroom)
library(wizard) # available at github.com/hartmast
library(lme4)
library(effects)
library(Hmisc)
library(caret)
library(rms)
library(afex)
library(scales)
library(patchwork)
library(writexl)
library(party)
library(partykit)
library(pscl)
library(glmmTMB)
# install.packages("tidyverse")
install.packages("tspredict")
# Vectors
my_vector <- c(1,2,3)
my_character_vector <- c("a", "b", "c")
my_other_character_vector <- c(1, "two", 3)
# Data frames
my_data_frame <- data.frame(names = c("Jack", "Jill", "Hensel", "Gretel"),
gingerbread = c(5, 6, 2, 10) )
my_data_frame[2,2]
my_data_frame[3,1]
rownames(my_data_frame)
my_second_data_frame <- data.frame(A = my_vector, B = my_character_vector,
C = my_other_character_vector)
# Matrices
my_matrix <- matrix(c(1,2,3,4,5,6), ncol = 2)
# Lists
my_list <- list(my_vector, my_data_frame, my_matrix)
my_vector[2]
my_list[[2]][3,2]
# install.packages("tidyverse")
library(tidyverse)
?separate
setwd("/Users/stefanhartmann/sciebo/Projekte/LOT Tilburg")
list.dirs()
setwd("/Users/stefanhartmann/sciebo/Projekte/LOT Tilburg/R_Tilburg")
getwd()
